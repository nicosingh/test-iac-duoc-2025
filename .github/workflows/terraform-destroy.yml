name: Terraform Destroy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to destroy'
        required: true
        type: choice
        options:
          - desarrollo
          - produccion

jobs:
  terraform-destroy:
    name: Terraform Destroy - ${{ inputs.environment }}
    runs-on: ubuntu-latest
    
    environment:
      name: ${{ inputs.environment }}
      
    steps:
    - name: Setup Tools
      uses: ./.github/actions/setup-tools

    - name: Azure Login
      uses: ./.github/actions/azure-login

    - name: Setup Terraform Backend and Init
      uses: ./.github/actions/terraform-backend-init
      with:
        backend_tfvars: ${{ vars.BACKEND_TFVARS }}

    - name: Select Terraform Workspace
      run: |
        terraform workspace select ${{ inputs.environment }} || {
          echo "Workspace ${{ inputs.environment }} does not exist. Cannot destroy non-existent environment."
          exit 1
        }

    - name: Show Destroy Plan
      run: |
        echo "Showing what will be destroyed in ${{ inputs.environment }} environment:"
        terraform plan -destroy

    - name: Terraform Destroy
      run: terraform destroy -auto-approve

    - name: Cleanup Workspace (Optional)
      if: success()
      run: |
        echo "Infrastructure destroyed successfully in ${{ inputs.environment }} environment"
        echo "Note: Terraform workspace '${{ inputs.environment }}' still exists with empty state"
        echo "You can delete it manually with: terraform workspace delete ${{ inputs.environment }}"

name: Terraform Multi-Environment

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # Job 1: Plan and Apply in desarrollo environment
  terraform-desarrollo:
    name: Terraform - Desarrollo
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'pull_request' && github.base_ref == 'main')
    
    outputs:
      plan-exitcode: ${{ steps.plan.outputs.exitcode }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Azure CLI
      shell: bash
      run: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: latest

    - name: Azure Login with Device Code
      shell: bash
      run: |
        echo "Starting Azure login with device code..."
        echo "You will see a code and URL below. Open the URL in your browser and enter the code to authenticate."
        echo ""
        az login --use-device-code
        echo ""
        echo "Azure login successful!"
    
    - name: Create temporary backend config file
      run: |
        cat << 'EOF' > backend.tfvars
        ${{ vars.BACKEND_TFVARS }}
        EOF

    - name: Ensure TF Backend storage account and container exist
      shell: bash
      run: |
        echo "Checking if storage account and container exist..."
        
        # Parse backend config
        RESOURCE_GROUP=$(grep 'resource_group_name' backend.tfvars | cut -d'"' -f2 | tr -d ' ')
        STORAGE_ACCOUNT=$(grep 'storage_account_name' backend.tfvars | cut -d'"' -f2 | tr -d ' ')
        CONTAINER_NAME=$(grep 'container_name' backend.tfvars | cut -d'"' -f2 | tr -d ' ')
        
        echo "Resource Group: $RESOURCE_GROUP"
        echo "Storage Account: $STORAGE_ACCOUNT"
        echo "Container: $CONTAINER_NAME"
        
        # Check if storage account exists, create if not
        if ! az storage account show --name "$STORAGE_ACCOUNT" --resource-group "$RESOURCE_GROUP" >/dev/null 2>&1; then
          echo "Storage account $STORAGE_ACCOUNT does not exist, creating..."
          az storage account create \
            --name "$STORAGE_ACCOUNT" \
            --resource-group "$RESOURCE_GROUP" \
            --location "East US" \
            --sku "Standard_LRS" \
            --kind "StorageV2"
        else
          echo "Storage account $STORAGE_ACCOUNT already exists"
        fi
        
        # Get storage account key
        STORAGE_KEY=$(az storage account keys list \
          --account-name "$STORAGE_ACCOUNT" \
          --resource-group "$RESOURCE_GROUP" \
          --query '[0].value' --output tsv)
        
        # Check if container exists, create if not
        if ! az storage container show \
          --name "$CONTAINER_NAME" \
          --account-name "$STORAGE_ACCOUNT" \
          --account-key "$STORAGE_KEY" >/dev/null 2>&1; then
          echo "Container $CONTAINER_NAME does not exist, creating..."
          az storage container create \
            --name "$CONTAINER_NAME" \
            --account-name "$STORAGE_ACCOUNT" \
            --account-key "$STORAGE_KEY"
        else
          echo "Container $CONTAINER_NAME already exists"
        fi
        
        echo "Storage account and container are ready!"
      
    - name: Terraform Init
      run: terraform init -backend-config=backend.tfvars

    - name: Create or Select Terraform Workspace - Desarrollo
      run: |
        terraform workspace select desarrollo || terraform workspace new desarrollo

    - name: Terraform Plan - Desarrollo
      id: plan
      run: |
        terraform plan -detailed-exitcode -out=tfplan-desarrollo
      continue-on-error: true

    - name: Terraform Apply - Desarrollo
      if: |
        steps.plan.outputs.exitcode == 2 && (
          (github.event_name == 'push' && github.ref == 'refs/heads/main')
        )
      run: terraform apply -auto-approve tfplan-desarrollo

  # Job 2: Plan in produccion environment (runs after desarrollo success)
  terraform-produccion-plan:
    name: Terraform Plan - Produccion
    runs-on: ubuntu-latest
    needs: terraform-desarrollo
    if: |
      always() && 
      needs.terraform-desarrollo.result == 'success' &&
      (
        (github.event_name == 'push' && github.ref == 'refs/heads/main')
      )
    
    outputs:
      plan-exitcode: ${{ steps.plan.outputs.exitcode }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Azure CLI
      shell: bash
      run: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: latest

    - name: Azure Login with Device Code
      shell: bash
      run: |
        echo "Starting Azure login with device code..."
        echo "You will see a code and URL below. Open the URL in your browser and enter the code to authenticate."
        echo ""
        az login --use-device-code
        echo ""
        echo "Azure login successful!"
    
    - name: Create temporary backend config file
      run: |
        cat << 'EOF' > backend.tfvars
        ${{ vars.BACKEND_TFVARS }}
        EOF

    - name: Ensure TF Backend storage account and container exist
      shell: bash
      run: |
        echo "Checking if storage account and container exist..."
        
        # Parse backend config
        RESOURCE_GROUP=$(grep 'resource_group_name' backend.tfvars | cut -d'"' -f2 | tr -d ' ')
        STORAGE_ACCOUNT=$(grep 'storage_account_name' backend.tfvars | cut -d'"' -f2 | tr -d ' ')
        CONTAINER_NAME=$(grep 'container_name' backend.tfvars | cut -d'"' -f2 | tr -d ' ')
        
        echo "Resource Group: $RESOURCE_GROUP"
        echo "Storage Account: $STORAGE_ACCOUNT"
        echo "Container: $CONTAINER_NAME"
        
        # Check if storage account exists, create if not
        if ! az storage account show --name "$STORAGE_ACCOUNT" --resource-group "$RESOURCE_GROUP" >/dev/null 2>&1; then
          echo "Storage account $STORAGE_ACCOUNT does not exist, creating..."
          az storage account create \
            --name "$STORAGE_ACCOUNT" \
            --resource-group "$RESOURCE_GROUP" \
            --location "East US" \
            --sku "Standard_LRS" \
            --kind "StorageV2"
        else
          echo "Storage account $STORAGE_ACCOUNT already exists"
        fi
        
        # Get storage account key
        STORAGE_KEY=$(az storage account keys list \
          --account-name "$STORAGE_ACCOUNT" \
          --resource-group "$RESOURCE_GROUP" \
          --query '[0].value' --output tsv)
        
        # Check if container exists, create if not
        if ! az storage container show \
          --name "$CONTAINER_NAME" \
          --account-name "$STORAGE_ACCOUNT" \
          --account-key "$STORAGE_KEY" >/dev/null 2>&1; then
          echo "Container $CONTAINER_NAME does not exist, creating..."
          az storage container create \
            --name "$CONTAINER_NAME" \
            --account-name "$STORAGE_ACCOUNT" \
            --account-key "$STORAGE_KEY"
        else
          echo "Container $CONTAINER_NAME already exists"
        fi
        
        echo "Storage account and container are ready!"
      
    - name: Terraform Init
      run: terraform init -backend-config=backend.tfvars

    - name: Create or Select Terraform Workspace - Produccion
      run: |
        terraform workspace select produccion || terraform workspace new produccion

    - name: Terraform Plan - Produccion
      id: plan
      run: |
        terraform plan -detailed-exitcode -out=tfplan-produccion
      continue-on-error: true

    - name: Upload Terraform Plan Artifact
      uses: actions/upload-artifact@v4
      with:
        name: tfplan-produccion
        path: tfplan-produccion
        retention-days: 30

  # Job 3: Apply in produccion environment (manual approval required)
  terraform-produccion-apply:
    name: Terraform Apply - Produccion
    runs-on: ubuntu-latest
    needs: [terraform-desarrollo, terraform-produccion-plan]
    if: |
      always() && 
      needs.terraform-desarrollo.result == 'success' &&
      needs.terraform-produccion-plan.result == 'success' &&
      needs.terraform-produccion-plan.outputs.plan-exitcode == '2' &&
      (
        (github.event_name == 'push' && github.ref == 'refs/heads/main')
      )
    
    environment:
      name: produccion
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Azure CLI
      shell: bash
      run: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: latest

    - name: Azure Login with Device Code
      shell: bash
      run: |
        echo "Starting Azure login with device code..."
        echo "You will see a code and URL below. Open the URL in your browser and enter the code to authenticate."
        echo ""
        az login --use-device-code
        echo ""
        echo "Azure login successful!"
    
    - name: Create temporary backend config file
      run: |
        cat << 'EOF' > backend.tfvars
        ${{ vars.BACKEND_TFVARS }}
        EOF

    - name: Terraform Init
      run: terraform init -backend-config=backend.tfvars

    - name: Create or Select Terraform Workspace - Produccion
      run: |
        terraform workspace select produccion || terraform workspace new produccion

    - name: Download Terraform Plan Artifact
      uses: actions/download-artifact@v4
      with:
        name: tfplan-produccion

    - name: Terraform Apply - Produccion
      run: terraform apply -auto-approve tfplan-produccion
